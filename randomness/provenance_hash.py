import hashlib
import glob
from natsort import natsorted
from shuffle import shuffle

'''
1. Take the SHA256 hash of each token’s SVG image
2. Concatenate the hashes of each token’s SVG image
3. Calculate the SHA256 hash of the concatenated string
4. Convert SHA256 to integer
'''

PATH = '../output/png_files/'


def make_image_hash_list() -> list:
    filelist = glob.glob(PATH + '*')
    filelist = natsorted(filelist)
    hashes = []
    for file in filelist:
        with open(file, 'rb') as f:
            hashes.append(hashlib.sha256(f.read()).hexdigest())
    return hashes


def make_final_hash() -> str:
    image_hashes = make_image_hash_list()
    concatenated_hashes = ''.join(image_hashes)
    return hashlib.sha256(concatenated_hashes.encode('utf-8')).hexdigest()


final_hash = make_final_hash()  # this is the starting hash of the collection before the shuffle with the seed
# convert final_hash to integer, this will be the seed
seed = int(final_hash, 16)

# arr is an array of 4000 numbers (total number of NFTs), starting from 0 and ending at 3999
arr = list(range(4000))
# shuffle the array using the seed
final_arr = shuffle(arr, seed)  # we can also un_shuffle the array using the seed and get the original array later
print(final_hash)

'''
For the future: 
We can get another number generated by the Discord users and add the number to the seed. 
Then the final seed = seed + number and final_shuffled_array = shuffle(arr, final_seed)
OR we can get the number from the Discord users and use it as the seed and final_shuffled_array = shuffle(arr, number)
This ensures fairness. 
'''
